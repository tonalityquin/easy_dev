import 'package:flutter/material.dart';
import 'package:flutter/services.dart'; // ‚úÖ ÏûÖÎ†• Ìè¨Îß∑ÌÑ∞ & MaxLengthEnforcement
import '../../../../../utils/snackbar_helper.dart';
import '../../../../type_package/debugs/firestore_logger.dart';
import '../monthly_plate_controller.dart';

class MonthlyCustomStatusSection extends StatefulWidget {
  final MonthlyPlateController controller;
  final String? fetchedCustomStatus;
  final VoidCallback onDeleted;
  final VoidCallback onStatusCleared;
  final Key statusSectionKey;

  const MonthlyCustomStatusSection({
    super.key,
    required this.controller,
    required this.fetchedCustomStatus,
    required this.onDeleted,
    required this.onStatusCleared,
    required this.statusSectionKey,
  });

  @override
  State<MonthlyCustomStatusSection> createState() => _MonthlyCustomStatusSectionState();
}

class _MonthlyCustomStatusSectionState extends State<MonthlyCustomStatusSection> {
  String? _errorMessage;
  bool _deleting = false;

  void _validateInput() {
    final input = widget.controller.customStatusController.text.trim();
    setState(() {
      _errorMessage = input.isEmpty ? '‚ö† Î©îÎ™® ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.' : null;
    });
  }

  @override
  Widget build(BuildContext context) {
    final cs = Theme.of(context).colorScheme;

    return KeyedSubtree(
      key: widget.statusSectionKey,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'Ï∂îÍ∞Ä ÏÉÅÌÉú Î©îÎ™® (ÏµúÎåÄ 20Ïûê)',
            style: TextStyle(fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 8),

          // Ï†ëÍ∑ºÏÑ± ÎùºÎ≤® + Í∏∏Ïù¥ Ï†úÌïú + Î¨∏Ïûê ÌïÑÌÑ∞
          Semantics(
            label: 'Ï∂îÍ∞Ä ÏÉÅÌÉú Î©îÎ™® ÏûÖÎ†•',
            hint: 'ÏµúÎåÄ 20ÏûêÍπåÏßÄ ÏûÖÎ†•Ìï† Ïàò ÏûàÏäµÎãàÎã§',
            child: TextField(
              controller: widget.controller.customStatusController,
              maxLength: 20,
              // üîß Ìò∏ÌôòÏÑ±: truncateAfterComposition ÎØ∏ÏßÄÏõê Î≤ÑÏ†ÑÏö©
              maxLengthEnforcement: MaxLengthEnforcement.enforced,
              onChanged: (_) => _validateInput(),
              inputFormatters: [
                // ÌïúÍ∏Ä/ÏòÅÎ¨∏/Ïà´Ïûê/Í≥µÎ∞±/Í∏∞Î≥∏ Íµ¨ÎëêÏ†ê ÌóàÏö© (Ï†ïÏ±ÖÏóê ÎßûÍ≤å Ï°∞Ï†ï Í∞ÄÎä•)
                FilteringTextInputFormatter.allow(
                  RegExp(r"[a-zA-Z0-9Í∞Ä-Ìû£\s\.\,\-\(\)\/]"),
                ),
              ],
              decoration: InputDecoration(
                hintText: 'Ïòà: Îí∑Î≤îÌçº ÏÜêÏÉÅ',
                border: OutlineInputBorder(borderRadius: BorderRadius.circular(8)),
                contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 12),
                errorText: _errorMessage,
              ),
            ),
          ),

          if (widget.fetchedCustomStatus != null)
            Padding(
              padding: const EdgeInsets.only(top: 12),
              child: Container(
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey.shade300),
                  borderRadius: BorderRadius.circular(8),
                ),
                padding: const EdgeInsets.all(12),
                child: Row(
                  children: [
                    const Icon(Icons.info_outline, size: 20, color: Colors.blueGrey),
                    const SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        'ÏûêÎèô Ï†ÄÏû•Îêú Î©îÎ™®: "${widget.fetchedCustomStatus}"',
                        style: const TextStyle(fontSize: 14),
                        overflow: TextOverflow.ellipsis,
                      ),
                    ),
                    const SizedBox(width: 8),
                    IconButton(
                      tooltip: 'ÏûêÎèô Î©îÎ™® ÏÇ≠Ï†ú',
                      icon: _deleting
                          ? SizedBox(
                        width: 20,
                        height: 20,
                        child: CircularProgressIndicator(
                          strokeWidth: 2,
                          color: cs.error,
                        ),
                      )
                          : const Icon(Icons.delete_outline, color: Colors.red),
                      onPressed: _deleting
                          ? null
                          : () async {
                        FocusScope.of(context).unfocus();
                        setState(() => _deleting = true);
                        try {
                          await FirestoreLogger().log(
                            'üóëÔ∏è ÏÉÅÌÉú Î©îÎ™® ÏÇ≠Ï†ú ÏãúÎèÑ: ${widget.controller.buildPlateNumber()}',
                            level: 'called',
                          );

                          await widget.controller.deleteCustomStatusFromFirestore(context);
                          await FirestoreLogger().log('‚úÖ ÏÉÅÌÉú Î©îÎ™® ÏÇ≠Ï†ú ÏôÑÎ£å', level: 'success');

                          widget.onDeleted();
                          widget.onStatusCleared();

                          showSuccessSnackbar(context, 'ÏûêÎèô Î©îÎ™®Í∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§');
                        } catch (e) {
                          await FirestoreLogger().log('‚ùå ÏÉÅÌÉú Î©îÎ™® ÏÇ≠Ï†ú Ïã§Ìå®: $e', level: 'error');
                          showFailedSnackbar(context, 'ÏÇ≠Ï†ú Ïã§Ìå®. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî');
                        } finally {
                          if (mounted) setState(() => _deleting = false);
                        }
                      },
                    )
                  ],
                ),
              ),
            ),
        ],
      ),
    );
  }
}
