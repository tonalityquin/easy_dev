import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';

import '../../models/plate_model.dart';
import '../../enums/plate_type.dart';
import '../../screens/type_pages/debugs/firestore_logger.dart';
import 'plate_write_service.dart';
import 'plate_query_service.dart';

class PlateCreationService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final PlateWriteService _writeService = PlateWriteService();
  final PlateQueryService _queryService = PlateQueryService();

  Future<void> addPlate({
    required String plateNumber,
    required String location,
    required String area,
    required PlateType plateType,
    required String userName,
    String? billingType,
    List<String>? statusList,
    int? basicStandard,
    int? basicAmount,
    int? addStandard,
    int? addAmount,
    required String region,
    List<String>? imageUrls,
    bool isLockedFee = false,
    int? lockedAtTimeInSeconds,
    int? lockedFeeAmount,
    DateTime? endTime,
    String? paymentMethod,
    String? customStatus,

    // ‚úÖ Ï∂îÍ∞Ä: Î≥ÄÎèô/Í≥†Ï†ï/Ï†ïÍ∏∞ ÌÉÄÏûÖ Ï†ÑÎã¨(ÌïÑÏàò)
    required String selectedBillType,
  }) async {
    final documentId = '${plateNumber}_$area';
    await FirestoreLogger().log('addPlate called: $documentId, plateNumber=$plateNumber');

    // Ï§ëÎ≥µ Í≤ÄÏÇ¨
    final existingPlate = await _queryService.getPlate(documentId);
    if (existingPlate != null) {
      final existingType = PlateType.values.firstWhere(
            (type) => type.firestoreValue == existingPlate.type,
        orElse: () => PlateType.parkingRequests,
      );

      if (!_isAllowedDuplicate(existingType)) {
        debugPrint("üö® Ï§ëÎ≥µÎêú Î≤àÌò∏Ìåê Îì±Î°ù ÏãúÎèÑ: $plateNumber (${existingType.name})");
        await FirestoreLogger().log('addPlate error: duplicate plate - $plateNumber');
        throw Exception("Ïù¥ÎØ∏ Îì±Î°ùÎêú Î≤àÌò∏ÌåêÏûÖÎãàÎã§: $plateNumber");
      } else {
        debugPrint("‚ö†Ô∏è ${existingType.name} ÏÉÅÌÉú Ï§ëÎ≥µ Îì±Î°ù ÌóàÏö©: $plateNumber");
        await FirestoreLogger().log('addPlate allowed duplicate: $plateNumber (${existingType.name})');
      }
    }

    int? regularAmount;
    int? regularDurationHours;

    // ‚úÖ ÌïµÏã¨ Î∂ÑÍ∏∞: 'Ï†ïÍ∏∞'Í∞Ä ÏïÑÎãàÍ≥† billingTypeÏù¥ ÏûàÏùÑ ÎïåÎßå bill Ï°∞Ìöå
    if (selectedBillType != 'Ï†ïÍ∏∞' && billingType != null && billingType.isNotEmpty) {
      try {
        final billDoc = await _firestore.collection('bill').doc('${billingType}_$area').get();
        if (billDoc.exists) {
          final billData = billDoc.data()!;

          // Î≥ÄÎèô/Í≥†Ï†ï Ï†ïÏÇ∞ ÏÑ∏ÌåÖ
          basicStandard = billData['basicStandard'] ?? 0;
          basicAmount   = billData['basicAmount']   ?? 0;
          addStandard   = billData['addStandard']   ?? 0;
          addAmount     = billData['addAmount']     ?? 0;

          // (Í≥†Ï†ïÏóêÏÑú Ïì∏ ÏàòÎèÑ ÏûàÎäî) Ï†ïÍ∏∞ Í¥ÄÎ†® ÌïÑÎìúÍ∞Ä Ï†ïÏùòÎêòÏñ¥ ÏûàÏúºÎ©¥ Ïú†ÏßÄ
          regularAmount        = billData['regularAmount'];
          regularDurationHours = billData['regularDurationHours'];

          await FirestoreLogger().log('addPlate billing data loaded: $billingType');
        } else {
          throw Exception('FirestoreÏóêÏÑú Ï†ïÏÇ∞ Îç∞Ïù¥ÌÑ∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÏùå');
        }
      } catch (e) {
        debugPrint("üî• Ï†ïÏÇ∞ Ï†ïÎ≥¥ Î°úÎìú Ïã§Ìå®: $e");
        await FirestoreLogger().log('addPlate billing error: $e');
        throw Exception("Firestore Ï†ïÏÇ∞ Ï†ïÎ≥¥ Î°úÎìú Ïã§Ìå®: $e");
      }
    } else if (selectedBillType == 'Ï†ïÍ∏∞') {
      // ‚úÖ Ï†ïÍ∏∞: ÏÇ¨Ï†Ñ Í≤∞Ï†ú ‚Üí 0Î∂Ñ/0Ïõê Í∞ïÏ†ú
      basicStandard = 0;
      basicAmount   = 0;
      addStandard   = 0;
      addAmount     = 0;

      // Ï†ïÍ∏∞ Î©îÌÉÄÎäî plate_statusÏóê Ï†ÄÏû•/Í¥ÄÎ¶¨. plateÏóêÎäî ÌïÑÏöîÏãú ÎùºÎ≤®Îßå Ï†ÄÏû•Ìï† Ïàò ÏûàÏùå.
    }

    final plateFourDigit = plateNumber.length >= 4
        ? plateNumber.substring(plateNumber.length - 4)
        : plateNumber;

    // billingTypeÏù¥ ÎπÑÏóàÏúºÎ©¥ ÏöîÍ∏à Ïû†Í∏à Ï≤òÎ¶¨
    final effectiveIsLockedFee = isLockedFee || (billingType == null || billingType.trim().isEmpty);

    final plate = PlateModel(
      id: documentId,
      plateNumber: plateNumber,
      plateFourDigit: plateFourDigit,
      type: plateType.firestoreValue,
      requestTime: DateTime.now(),
      endTime: endTime,
      location: location.isNotEmpty ? location : 'ÎØ∏ÏßÄÏ†ï',
      area: area,
      userName: userName,
      billingType: billingType,
      statusList: statusList ?? [],
      basicStandard: basicStandard ?? 0,
      basicAmount: basicAmount ?? 0,
      addStandard: addStandard ?? 0,
      addAmount: addAmount ?? 0,
      region: region,
      imageUrls: imageUrls,
      isSelected: false,
      selectedBy: null,
      isLockedFee: effectiveIsLockedFee,
      lockedAtTimeInSeconds: lockedAtTimeInSeconds,
      lockedFeeAmount: lockedFeeAmount,
      paymentMethod: paymentMethod,
      customStatus: customStatus,
      regularAmount: regularAmount,
      regularDurationHours: regularDurationHours,
    );

    final plateWithLog = plate.addLog(
      action: 'create',
      performedBy: userName,
      from: '',
      to: location.isNotEmpty ? location : 'ÎØ∏ÏßÄÏ†ï',
    );

    debugPrint("üî• Ï†ÄÏû•Ìï† plate: ${plateWithLog.toMap()}");
    await _writeService.addOrUpdatePlate(documentId, plateWithLog);

    if (customStatus != null && customStatus.trim().isNotEmpty) {
      final statusDocRef = _firestore.collection('plate_status').doc(documentId);
      final expireAt = Timestamp.fromDate(DateTime.now().add(const Duration(days: 1)));

      await statusDocRef.set({
        'customStatus': customStatus,
        'updatedAt': Timestamp.now(),
        'createdBy': userName,
        'expireAt': expireAt,
      });

      await FirestoreLogger().log('addPlate customStatus saved: $customStatus');
    }

    await FirestoreLogger().log('addPlate success: $documentId');
  }

  bool _isAllowedDuplicate(PlateType type) {
    return type == PlateType.departureCompleted;
  }
}
